@using test.Models

<td style="width: 10%;"><div style="text-align: right;"><a href="@Url.Action("Index")" class="btn btn-primary"><i class="fa-solid fa-pen-to-square"></i>Go Back</a></div></td>

@model test.Models.ProgrammingTask
@{
    ViewData["Title"] = "Task";
}

<style>
    html body h1 {
        padding: 20px;
        font-size: 32px;
        font-weight: bolder;
    }

    html body p {
        padding: 20px;
        font-size: 16px;
        font-weight: normal;
    }

    html body h2 {
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
    }

    button {
        font-family: 'Kanit', sans-serif;
        font-weight: 200;
    }
    
</style>


<!-- Title -->

<h1>@Model.Title</h1>

<h2>
    <div>
        Difficulty: @Model.Difficulty
    </div>
    <div>
        Type: @Model.Type
    </div>
</h2>

<p>@Model.Description</p>

<div style="display: flex;">
    <div id="code-area" style="width: 70%;"></div>
    <div class="cmd" style="width: 30%;">
        <textarea class="textarea" id="divResult" readonly></textarea>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/darcula.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/clike/clike.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/addon/edit/closebrackets.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.3/mode/python/python.min.js"
        integrity="sha512-/mavDpedrvPG/0Grj2Ughxte/fsm42ZmZWWpHz1jCbzd5ECv8CB7PomGtw0NAnhHmE/lkDFkRMupjoohbKNA1Q=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<div style="margin-bottom:5px;">
    <div class="form-group">
        <label for="languageSelect">Language:</label>
        <select class="form-control" id="languageSelect">
            <option value="cpp">C++</option>
            <option value="python">Python</option>
        </select>
    </div>
</div>
<script>
    var startingCode = '';

    var editor = CodeMirror(document.getElementById('code-area'), {
        lineNumbers: true,
        value: startingCode,
        theme: 'darcula',
        mode: 'text/x-c++src',
        autoCloseBrackets: true,
        indentUnit: 4
    });

    function updateLanguage() {
        var language = document.getElementById('languageSelect').value;
        if (language === 'cpp') {
            editor.setOption('mode', 'text/x-c++src');
            startingCode = 
            `#include <iostream>

using namespace std;

int main()
{
    cout << "Hello world!\\n";
}`;
            editor.setValue(startingCode);
        } else if (language === 'python') {
            editor.setOption('mode', 'text/x-python');
            startingCode = `print("Hello world!")`;
            editor.setValue(startingCode);
        }
    }
    document.getElementById('languageSelect').addEventListener('change', updateLanguage);
    updateLanguage();

    var idSplitter = "veryultraspecialsplitterpleasedontuseasvariablename";
    

    function showCode() {
        var language = document.getElementById('languageSelect').value;
        var text = editor.getValue();
        $.ajax({
            url: "/Home/ShowCode",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify(@Model.IdTask + idSplitter + text + idSplitter + language ),
            success: function (mydata) {
                let arr = mydata.split("splitter");
                updateMaxAngle(arr[1]);
                $("#divResult").html(arr[0]);
                $("#outputs").html(arr[3]);
                let hints = arr[2].split("hint")
                const hintsContainer = document.getElementById("hints-container");
                hintsContainer.innerHTML = "";
                const hintsTitle = document.getElementById("hints-title")
                hintsTitle.innerHTML = @Html.Raw(Json.Serialize(Model.Title)) + ' hints:';
                for(let index in hints) {
                    if(hints[index] != "") {
                        const hint = document.createElement("div");
                        const idx = parseInt(index) + 1;
                        hint.innerHTML = "<h3>Hint " + idx +":</h3><p>" + hints[index] + "</p>";
                        hintsContainer.appendChild(hint);
                    }      
                }
            }
        })
    }

    function rotateNeedle(needle, angle) {
        needle.style.transform = 'rotate(' + angle + 'deg)';
    }

    let angle = 0;
    let speed = 0.5;
    let maxAngle = 0;

    function updateMaxAngle(consumption) {
        let newMaxAngle = parseInt(consumption);
        if (!isNaN(newMaxAngle) && newMaxAngle !== maxAngle) {
            maxAngle = newMaxAngle;
            rotateNeedle(document.querySelector('.needle'), 0); // reseting the angle of the needle (may change to instead to start from the current place)
            angle = 0; // reset the angle variable (may change to instead to start from the current angle)
            updateConsumptionMeaming();
        }
    }


    setInterval(function () {
        if (angle < maxAngle) {
            angle += speed;
            rotateNeedle(document.querySelector('.needle'), angle);
        }
    }, 10);

    function updateConsumptionMeaming() {
        if (maxAngle < 45) {
            document.getElementById("consumptionValueMeaning").innerHTML = "Very low";
        }
        if (maxAngle < 90 && maxAngle > 45) {
            document.getElementById("consumptionValueMeaning").innerHTML = "Very low";

            setTimeout(function () {
                document.getElementById("consumptionValueMeaning").innerHTML = "Low";
            }, 1000);
        }
        if (maxAngle < 135 && maxAngle > 90) {
            document.getElementById("consumptionValueMeaning").innerHTML = "Very low";

            setTimeout(function () {
                document.getElementById("consumptionValueMeaning").innerHTML = "Low";
            }, 1000);

            setTimeout(function () {
                document.getElementById("consumptionValueMeaning").innerHTML = "Medium";
            }, 2000);
        }
        if (maxAngle > 135) {
            document.getElementById("consumptionValueMeaning").innerHTML = "Very low";

            setTimeout(function () {
                document.getElementById("consumptionValueMeaning").innerHTML = "Low";
            }, 1000);

            setTimeout(function () {
                document.getElementById("consumptionValueMeaning").innerHTML = "Medium";
            }, 2000);

            setTimeout(function () {
                document.getElementById("consumptionValueMeaning").innerHTML = "High";
            }, 3000);
        }
    }


</script>

<button type="button" class="btn btn-success" onclick="showCode()">RUN</button>

<div class="gauge-wrapper" style="width: 30%;" style="text-align: right;">
    <div class="gauge four rischio3">
        <div class="slice-colors">
            <div class="st slice-item"></div>
            <div class="st slice-item"></div>
            <div class="st slice-item"></div>
            <div class="st slice-item"></div>
        </div>
        <div class="needle"></div>
        <div class="gauge-center">
            <div class="label">Consumption</div>
            <div class="number" id="consumptionValueMeaning">None</div>
        </div>
    </div>
</div>

<h2>Outputs:</h2>
<p id="outputs"></p>

<div>
    <h2 id="hints-title"></h2>
    <div id="hints-container">
        @if (Model.Hints != null && Model.Hints.Any())
        {
            <h2>@Model.Title hints:</h2>
            for(int i = 0; i < Model.Hints.Count(); i++)
            {
                <h3>Hint @(i+1)</h3>
                <div>@Html.Raw(Model.Hints[i].Description)</div>
            }
        }
    </div>
</div>


